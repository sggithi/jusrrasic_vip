<html>
<head>

    <script
            src="https://code.jquery.com/jquery-3.5.1.min.js"
            integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
            crossorigin="anonymous"></script>

    <link href="/static/style/game.css" rel="stylesheet">
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

</head>

<body>
<div class="info">
    <div class="player_info">
    </div>
    <div class="inventory_info">
    </div>
</div>

<div id="name"><%= data.name%></div>
<div id="status">
    현재위치: <span id="position"></span><br>
    HP: <span id="HP"></span><br>
    Level: <span id="level"></span><br>
    공격력: <span id="str"></span><br>
    방어력: <span id="defense"></span><br>
    획득한 이빨 개수: <span id="teeth"></span>
</div>

<div id="inventory">
    아이템: <span id="items"></span><br>
</div>
<input type = "text" id = "controller"/>
<button id = "controller_click" onclick = "control_submit()">controller</button>

<div class = "game_description">
    <div id="game"></div>
    -----------------------------------------------------------<br>
    <div id="event_result"></div>
    <div id="event_description"></div>
    -----------------------------------------------------------<br>
    <div id="control" >

    </div>
</div>

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css">
  <link rel="icon" href="favicon.ico">
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils@0.1/control_utils.css" crossorigin="anonymous">
  <link rel="stylesheet" type="text/css" href="demo.css" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils@0.1/camera_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils@0.1/control_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils@0.2/drawing_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.1/hands.js" crossorigin="anonymous"></script>
</head>

<body>


  <!-- CONTENTS -->
  <div class="container">

    <div class="columns" width ="600px">
      
      <!-- WEBCAM INPUT -->
      <div class="column1" >
        <article class="panel is-info">
          <p class="panel-heading">
            User_Origin
          </p>
          <div class="panel-block">
            <video class="input_video3"></video>
          </div>
        </article>
      </div>

      <!-- MEDIAPIPE OUTPUT -->
      <div class="column2">
        <article class="panel is-info">
          <p class="panel-heading">
            User_Detection
          </p>
          <div class="panel-block">
            <canvas class="output3" width="240px" height="240px"></canvas>
          </div>
        </article>
      </div>
    </div>
    
    <div class="loading">
      <div class="spinner"></div>
    </div>
  <div style="visibility: hidden;" class="control3">
  </div>

  <script type="text/javascript" src="./js/hands.js"></script>
</body>
</html>


<script>
    const video3 = document.getElementsByClassName('input_video3')[0];
const out3 = document.getElementsByClassName('output3')[0];
const controlsElement3 = document.getElementsByClassName('control3')[0];
const canvasCtx3 = out3.getContext('2d');
const fpsControl = new FPS();

const spinner = document.querySelector('.loading');
spinner.ontransitionend = () => {
  spinner.style.display = 'none';
};

function onResultsHands(results) {
  document.body.classList.add('loaded');
  fpsControl.tick();

  canvasCtx3.save();
  canvasCtx3.clearRect(0, 0, out3.width, out3.height);
  canvasCtx3.drawImage(
      results.image, 0, 0, out3.width, out3.height);
  if (results.multiHandLandmarks && results.multiHandedness) {
    
    //
    for (const landmarks of results.multiHandLandmarks) { // landmarks.length == 21 (0-20)
      for (var i=0; i<5; i++) {
        // true 손가락 펼쳐짐, false 손가락 접힘
          open[i] = dist(landmarks[0]['x'], landmarks[0]['y'], landmarks[compareIndex[i][0]]['x'], landmarks[compareIndex[i][0]]['y']) < dist(landmarks[0]['x'], landmarks[0]['y'], landmarks[compareIndex[i][1]]['x'], landmarks[compareIndex[i][1]]['y'])
      }

      // 지정된 제스처와 비교
      for (var i=0; i<3; i++) {
        var flag = true;
        for (var j=0; j<5; j++) {
          if (gesture[i][j] != open[j]) {
            flag = false
          }
        }
        if (flag == true) { // 지정된 제스처와 동일할 때
          console.log('result: ', gesture[i][5]);
        }
      }
    }
    //
    for (let index = 0; index < results.multiHandLandmarks.length; index++) {
      const classification = results.multiHandedness[index];
      const isRightHand = classification.label === 'Right';
      const landmarks = results.multiHandLandmarks[index];
      drawConnectors(
          canvasCtx3, landmarks, HAND_CONNECTIONS,
          {color: isRightHand ? '#00FF00' : '#FF0000'}),
      drawLandmarks(canvasCtx3, landmarks, {
        color: isRightHand ? '#00FF00' : '#FF0000',
        fillColor: isRightHand ? '#FF0000' : '#00FF00',
        radius: (x) => {
          return lerp(x.from.z, -0.15, .1, 10, 1);
        }
      });
    }
  }
  canvasCtx3.restore();
}
//
// check handpose
const compareIndex = [[18, 4], [6, 8], [10, 12], [14, 16], [18, 20]] // 비교할 손가락 point
var open = [false, false, false, false, false] // 각 손가락의 펼쳐짐 혹은 접힘 여부

// 지정된 제스처
const gesture = [[true, true, true, true, true, "Hi!"], [false, true, true, false, false, "Yeah!"], [true, true, false, false, true, "SpiderMan!"]]
function dist(x1, y1, x2, y2) { // 두 점 사이 거리 비교하여 손가락의 접힘 여부 판단
  return Math.sqrt(Math.pow(x1-x2, 2)) + Math.sqrt(Math.pow(y1-y2, 2));
}
//
const hands = new Hands({locateFile: (file) => {
  return `https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.1/${file}`;
}});
hands.onResults(onResultsHands);

const camera = new Camera(video3, {
  onFrame: async () => {
    await hands.send({image: video3});
  },
  width: 240,
  height: 240
});
camera.start();

new ControlPanel(controlsElement3, {
      selfieMode: true,
      maxNumHands: 2,
      minDetectionConfidence: 0.5,
      minTrackingConfidence: 0.5
    })
    .add([
      new StaticText({title: 'MediaPipe Hands'}),
      fpsControl,
      new Toggle({title: 'Selfie Mode', field: 'selfieMode'}),
      new Slider(
          {title: 'Max Number of Hands', field: 'maxNumHands', range: [1, 4], step: 1}),
      new Slider({
        title: 'Min Detection Confidence',
        field: 'minDetectionConfidence',
        range: [0, 1],
        step: 0.01
      }),
      new Slider({
        title: 'Min Tracking Confidence',
        field: 'minTrackingConfidence',
        range: [0, 1],
        step: 0.01
      }),
    ])
    .on(options => {
      hands.setOptions(options);
    });


    const control_submit = () => {
        
        var value = document.getElementById("controller").value;
        const buttons = document.getElementsByClassName("buttonss");
        console.log(buttons.length);
        for (var ii = 0; ii < buttons.length; ii++){
           if(buttons[ii].innerText === value){
             buttons[ii].click();
           }
        }
    }

        
    const modal_open = () => {
        document.getElementById('modal').style.display = 'block'
    }

    const modal_close = () => {
        document.getElementById('modal').style.display = 'none'
    }

    const key = localStorage.getItem('_key');
    if (!key) {
        location.href = "/";
    }
    const name =document.getElementById("name").innerText;

    const sendAction = (url, params = {}) => {
        $.ajax({
            url,
            headers: {
                Authorization: "Bearer " + key
            },
            method: "POST",
            data: params
        }).done((req) => {
            const { player, field, event, actions } = req;

            $('#game').text(field.description);
            $('#position').text(`(${field.x},${field.y})`);
            const x = field.x;
            const y = field.y;

            $('#control').html('');
            actions.forEach((action) => {
                const dom = $('<button class = "buttonss"></button>');
                dom.text(action.text);
                dom.bind('click', function () {
                    sendAction(action.url, action.params);
                });

                $('#control').append(dom);
            })

            if (field.x === 9 && field.y === 9) {
                if (player.teeth >= 30) {
                    $('#event_result').text("헬기 조종사 : 탈출을 축하한다! (˵ ͡~ ͜ʖ ͡°˵)ﾉ");
                    $('#event_description').text("");
                }
                else {
                    $('#event_result').text("헬기 조종사 : 공룡 이빨의 개수가 부족하다. 30개를 모아와라!");
                    $('#event_description').text("");
                }
            }
            else if (event) {
                $('#event_result').text(event.description);
                if (event.description1) $('#event_description').text(event.description1);

            } else {
                $('#event_result').text("아무 일도 일어나지 않았다.");
                $('#event_description').text("");
            }

            $('#HP').text(`${player.HP} / ${player.maxHP}`)
            $('#level').text(`${player.level}`)
            $('#str').text(`${player.str} + ${player.itemStr}`)
            $('#defense').text(`${player.def} + ${player.itemDef}`)
            $('#teeth').text(`${player.teeth}`)
            $('#items').text(`${player.itemNameArr}`)
        });

    }


    sendAction(`/action/${name}`, {action: 'query'});



</script>
</body>
</html>

